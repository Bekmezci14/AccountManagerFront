@page "/"  
@inject AccountsClient Client
@inject NavigationManager NavigationManager
<PageTitle>AccountManager</PageTitle>

<div class="mt-2">
    <a class="btn btn-primary" role="button" href="/edit-account">New Account</a>
</div>


@if (accounts == null)
{
    <p><em>Loading...</em></p>
}
else if (accounts.Length == 0)
{
    <p>No accounts found.</p>
}
else
{
<table class="table table-striped table-bordered table-hover mt-3">
    <thead class="table-dark">
        <th>Id</th>
        <th>UserName</th>
        <th>Password</th>
        <th>Email</th>
        <th>Ipadress</th>
        <th>Category</th>
        <th>
        </th>
    </thead>
    <tbody>
        @foreach (var account in accounts)
        {
            <tr>
                <td>@account.Id</td>
                <td>@account.UserName</td>
                <td>@account.Password</td>
                <td>@account.Email</td>
                <td>@account.Ipadress</td>
                <td>@account.Category</td>
                <td>
                    <div class="d-flex">
                        <a class="btn btn-primary me-2" href="@AccountUrl(account.Id)">
                            <i class="bi bi-pencil"></i>
                        </a>
                        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@GetDeleteModalId(account)" >
                            <i class="bi bi-x-lg"></i>
                        </button>
                    </div>
                    <DeleteAccount Account="@account" />
                </td>
            </tr>
        }

    </tbody>
</table>

@code {
    private AccountSummary[]? accounts;

    protected override async Task OnInitializedAsync()
    {
        accounts = await Client.GetAccountsAsync();
    }

    private static string AccountUrl(int id) => $"/edit-account/{id}";

    private string GetDeleteModalId(AccountSummary account)
    {
        return $"#{DeleteAccount.GetModalId(account)}";
    }

    
}
}
