@page "/edit-account"
@page "/edit-account/{id:int}"

@inject NavigationManager NavigationManager
@inject AccountsClient AccountsClient
@inject CategoriesClient CategoriesClient
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>@title</PageTitle>

@if(categories is null || account is null)
{
    <p><em>Loading categories...</em></p>
}
else{

<h3>New Account</h3>

<div class="row">
  <div class="col-md-4">
    

<EditForm Model="@account" FormName="editAccountForm" OnValidSubmit="HandleSubmit">
  <DataAnnotationsValidator />
  <ValidationSummary />
  <div class="mb-3">
    <label for="username" class="form-label">User Name: </label>
    <InputText id="username" class="form-control" @bind-Value="account.UserName" />
    <ValidationMessage For="() => account.UserName" />
  </div>

  <div class="mb-3">
    <label for="password" class="form-label">Password: </label>
    <InputText id="password" class="form-control" @bind-Value="account.Password" />
    <ValidationMessage For="() => account.Password" />
  </div>

  <div class="mb-3">
    <label for="Email" class="form-label">Email: </label>
    <InputText id="Email" class="form-control" @bind-Value="account.Email" />
  </div>

  <div class="mb-3">
    <label for="IpAdress" class="form-label">IpAdress: </label>
    <InputText id="IpAdress" class="form-control" @bind-Value="account.Ipadress" />
  </div>

  <div class="mb-3">
    <label for="category" class="form-label">Category: </label>
    <InputSelect id="category" class="form-select" @bind-Value="account.CategoryId" >
    <option value="">Select a Category</option>
    @foreach (var category in categories)
    {
        <option value="@category.Id">@category.Name</option>
    }
    </InputSelect>
    <ValidationMessage For="() => account.CategoryId" />

  </div>
  <button type="submit" class="btn btn-primary">Save</button>
  <a class="btn btn-secondary" href="/">Cancel</a>
</EditForm>

</div>
</div>
}

@code {
  [Parameter]
  public int? Id { get; set; }

  [SupplyParameterFromForm]
    private AccountDetails? account {get; set;} 

    private Category[]? categories;

    private string title = string.Empty;

    protected override void OnParametersSet()
    {
        if (account is not null)
        {
            return; // If account is already set, skip initialization
        }

        if (Id is not null)
        {
            account = AccountsClient.GetAccount(Id.Value);
            title = $"Edit Account {Id.Value}"; //   *** give "name" attribute to the Account *** -toDo
        }
        else
        {
            account = new AccountDetails
            {
                UserName = string.Empty,
                Password = string.Empty,
                Email = string.Empty,
                Ipadress = string.Empty,
            };
            title = "New Account";
        }
    }

    protected override void OnInitialized()
    {
        categories = CategoriesClient.GetCategories();
    }

    private void HandleSubmit()
    {
      ArgumentNullException.ThrowIfNull(account);

      if (Id is null)
      {
        AccountsClient.AddAccount(account);
      }
      else
      {
        account.Id = Id.Value;
        AccountsClient.UpdateAccount(account);
      }
      
      NavigationManager.NavigateTo("/");
    }
        
}